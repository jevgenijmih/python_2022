def insert_sort(A):
	"""sortirovka spiska A vstavkami"""
	N=len(A)
	for top in range (1, N):
		k= top
		#print('k= ', k)
		while k>0 and A[k-1] > A[k]: #poka 
			A[k], A[k-1] = A[k-1], A[k]
			#print (A)
			k-=1		#return ne trebuetsa
			#print('-1 k=', k)

def choise_sort(A):
	"""sortirovka spiska A viborom"""
	N=len(A)
	for pos in range(0,N-1):
		for k in range (pos+1, N):
			if A[k]< A[pos]:
				A[k], A[pos]= A[pos], A[k]
	

def bubble_sort(A):
	"""sortirovka spiska A metodom puzirjka"""
	N=len(A)
	for bypass in range (1, N):
		print('bypass = ', bypass)
		for k in range (0, N-bypass):
			print ('k=', k)
			if A[k]> A[k+1]:
				A[k],A[k+1]= A[k+1], A[k]
				print(A)
	
def test_sort(sort_algorithm):
	print("Testiruem: ", sort_algorithm.__doc__)
	print ("testcase #1: ", end="")
	A=[4,2,5,1,3]
	A_sorted=[1,2,3,4,5]
	sort_algorithm(A)
	print("Ok" if A == A_sorted else "Fail")
	
	#if A==A_sorted:
	#	print("Ok")
	#else:
	#	print("Fail")
	
	print ("testcase #2: ", end="")
	A=list(range(10, 20)) + list(range(0,10))
	
	A_sorted=list(range(20))
	sort_algorithm(A)
	print("Ok" if A == A_sorted else "Fail")
	
	print ("testcase #3: ", end="")
	A=[4,2,2,4,1]
	A_sorted=[1,2,2,4,4]
	sort_algorithm(A)
	print("Ok" if A == A_sorted else "Fail")
	
if __name__== "__main__":
	test_sort(insert_sort)
	test_sort(choise_sort)
	test_sort(bubble_sort)
